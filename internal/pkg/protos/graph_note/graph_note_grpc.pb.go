// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: protos/graph_note/graph_note.proto

package graph_note

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VisitService_AddVisitRecord_FullMethodName      = "/graph_note.VisitService/AddVisitRecord"
	VisitService_GetUserVisitRecords_FullMethodName = "/graph_note.VisitService/GetUserVisitRecords"
)

// VisitServiceClient is the client API for VisitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VisitServiceClient interface {
	AddVisitRecord(ctx context.Context, in *AddVisitRecordRequest, opts ...grpc.CallOption) (*AddVisitRecordResponse, error)
	GetUserVisitRecords(ctx context.Context, in *GetUserVisitRecordsRequest, opts ...grpc.CallOption) (*GetUserVisitRecordsResponse, error)
}

type visitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVisitServiceClient(cc grpc.ClientConnInterface) VisitServiceClient {
	return &visitServiceClient{cc}
}

func (c *visitServiceClient) AddVisitRecord(ctx context.Context, in *AddVisitRecordRequest, opts ...grpc.CallOption) (*AddVisitRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddVisitRecordResponse)
	err := c.cc.Invoke(ctx, VisitService_AddVisitRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *visitServiceClient) GetUserVisitRecords(ctx context.Context, in *GetUserVisitRecordsRequest, opts ...grpc.CallOption) (*GetUserVisitRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserVisitRecordsResponse)
	err := c.cc.Invoke(ctx, VisitService_GetUserVisitRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisitServiceServer is the server API for VisitService service.
// All implementations must embed UnimplementedVisitServiceServer
// for forward compatibility.
type VisitServiceServer interface {
	AddVisitRecord(context.Context, *AddVisitRecordRequest) (*AddVisitRecordResponse, error)
	GetUserVisitRecords(context.Context, *GetUserVisitRecordsRequest) (*GetUserVisitRecordsResponse, error)
	mustEmbedUnimplementedVisitServiceServer()
}

// UnimplementedVisitServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVisitServiceServer struct{}

func (UnimplementedVisitServiceServer) AddVisitRecord(context.Context, *AddVisitRecordRequest) (*AddVisitRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVisitRecord not implemented")
}
func (UnimplementedVisitServiceServer) GetUserVisitRecords(context.Context, *GetUserVisitRecordsRequest) (*GetUserVisitRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserVisitRecords not implemented")
}
func (UnimplementedVisitServiceServer) mustEmbedUnimplementedVisitServiceServer() {}
func (UnimplementedVisitServiceServer) testEmbeddedByValue()                      {}

// UnsafeVisitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VisitServiceServer will
// result in compilation errors.
type UnsafeVisitServiceServer interface {
	mustEmbedUnimplementedVisitServiceServer()
}

func RegisterVisitServiceServer(s grpc.ServiceRegistrar, srv VisitServiceServer) {
	// If the following call pancis, it indicates UnimplementedVisitServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VisitService_ServiceDesc, srv)
}

func _VisitService_AddVisitRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVisitRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitServiceServer).AddVisitRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisitService_AddVisitRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitServiceServer).AddVisitRecord(ctx, req.(*AddVisitRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VisitService_GetUserVisitRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserVisitRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisitServiceServer).GetUserVisitRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VisitService_GetUserVisitRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisitServiceServer).GetUserVisitRecords(ctx, req.(*GetUserVisitRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VisitService_ServiceDesc is the grpc.ServiceDesc for VisitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VisitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graph_note.VisitService",
	HandlerType: (*VisitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddVisitRecord",
			Handler:    _VisitService_AddVisitRecord_Handler,
		},
		{
			MethodName: "GetUserVisitRecords",
			Handler:    _VisitService_GetUserVisitRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/graph_note/graph_note.proto",
}
